// Generated by `wit-bindgen` 0.19.2. DO NOT EDIT!
package ml

// #include "ml.h"
import "C"
import "unsafe"
import "fmt"

// Import functions from wasi:nn/tensor
type WasiNnTensorTensorDimensions = uint32
type WasiNnTensorTensorTypeKind int

const (
WasiNnTensorTensorTypeKindFp16 WasiNnTensorTensorTypeKind = iota
WasiNnTensorTensorTypeKindFp32
WasiNnTensorTensorTypeKindFp64
WasiNnTensorTensorTypeKindBf16
WasiNnTensorTensorTypeKindU8
WasiNnTensorTensorTypeKindI32
WasiNnTensorTensorTypeKindI64
)

type WasiNnTensorTensorType struct {
  kind WasiNnTensorTensorTypeKind
}

func (n WasiNnTensorTensorType) Kind() WasiNnTensorTensorTypeKind {
  return n.kind
}

func WasiNnTensorTensorTypeFp16() WasiNnTensorTensorType{
  return WasiNnTensorTensorType{kind: WasiNnTensorTensorTypeKindFp16}
}

func WasiNnTensorTensorTypeFp32() WasiNnTensorTensorType{
  return WasiNnTensorTensorType{kind: WasiNnTensorTensorTypeKindFp32}
}

func WasiNnTensorTensorTypeFp64() WasiNnTensorTensorType{
  return WasiNnTensorTensorType{kind: WasiNnTensorTensorTypeKindFp64}
}

func WasiNnTensorTensorTypeBf16() WasiNnTensorTensorType{
  return WasiNnTensorTensorType{kind: WasiNnTensorTensorTypeKindBf16}
}

func WasiNnTensorTensorTypeU8() WasiNnTensorTensorType{
  return WasiNnTensorTensorType{kind: WasiNnTensorTensorTypeKindU8}
}

func WasiNnTensorTensorTypeI32() WasiNnTensorTensorType{
  return WasiNnTensorTensorType{kind: WasiNnTensorTensorTypeKindI32}
}

func WasiNnTensorTensorTypeI64() WasiNnTensorTensorType{
  return WasiNnTensorTensorType{kind: WasiNnTensorTensorTypeKindI64}
}

type WasiNnTensorTensorData = uint8
// WasiNnTensorTensor is a handle to imported resource tensor
type WasiNnTensorTensor int32

//go:wasmimport wasi:nn/tensor [resource-drop]tensor
func _WasiNnTensorTensor_drop(self WasiNnTensorTensor)

func (self WasiNnTensorTensor) Drop() {
  _WasiNnTensorTensor_drop(self)
}

func NewTensor(dimensions []uint32, ty WasiNnTensorTensorType, data []uint8) WasiNnTensorTensor {
  var lower_dimensions C.wasi_nn_tensor_tensor_dimensions_t
  if len(dimensions) == 0 {
    lower_dimensions.ptr = nil
    lower_dimensions.len = 0
  } else {
    var empty_lower_dimensions C.uint32_t
    lower_dimensions.ptr = (*C.uint32_t)(C.malloc(C.size_t(len(dimensions)) * C.size_t(unsafe.Sizeof(empty_lower_dimensions))))
    lower_dimensions.len = C.size_t(len(dimensions))
    for lower_dimensions_i := range dimensions {
      lower_dimensions_ptr := (*C.uint32_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_dimensions.ptr)) +
      uintptr(lower_dimensions_i)*unsafe.Sizeof(empty_lower_dimensions)))
      lower_dimensions_ptr_value := C.uint32_t(dimensions[lower_dimensions_i])
      *lower_dimensions_ptr = lower_dimensions_ptr_value
    }
  }
  var lower_ty C.wasi_nn_tensor_tensor_type_t
  if ty.Kind() == WasiNnTensorTensorTypeKindFp16 {
    lower_ty = 0
  }
  if ty.Kind() == WasiNnTensorTensorTypeKindFp32 {
    lower_ty = 1
  }
  if ty.Kind() == WasiNnTensorTensorTypeKindFp64 {
    lower_ty = 2
  }
  if ty.Kind() == WasiNnTensorTensorTypeKindBf16 {
    lower_ty = 3
  }
  if ty.Kind() == WasiNnTensorTensorTypeKindU8 {
    lower_ty = 4
  }
  if ty.Kind() == WasiNnTensorTensorTypeKindI32 {
    lower_ty = 5
  }
  if ty.Kind() == WasiNnTensorTensorTypeKindI64 {
    lower_ty = 6
  }
  var lower_data C.wasi_nn_tensor_tensor_data_t
  if len(data) == 0 {
    lower_data.ptr = nil
    lower_data.len = 0
  } else {
    var empty_lower_data C.uint8_t
    lower_data.ptr = (*C.uint8_t)(C.malloc(C.size_t(len(data)) * C.size_t(unsafe.Sizeof(empty_lower_data))))
    lower_data.len = C.size_t(len(data))
    for lower_data_i := range data {
      lower_data_ptr := (*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_data.ptr)) +
      uintptr(lower_data_i)*unsafe.Sizeof(empty_lower_data)))
      lower_data_ptr_value := C.uint8_t(data[lower_data_i])
      *lower_data_ptr = lower_data_ptr_value
    }
  }
  ret := C.wasi_nn_tensor_constructor_tensor(&lower_dimensions , lower_ty , &lower_data )
  var lift_ret WasiNnTensorTensor
  lift_ret = WasiNnTensorTensor(ret.__handle)
  
  return lift_ret
}

func (self WasiNnTensorTensor) Dimensions() []uint32 {
  var lower_self C.wasi_nn_tensor_borrow_tensor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_nn_tensor_tensor_dimensions_t
  C.wasi_nn_tensor_method_tensor_dimensions(lower_self , &ret )
  var lift_ret []uint32
  lift_ret = make([]uint32, ret.len)
  if ret.len > 0 {
    for lift_ret_i := 0; lift_ret_i < int(ret.len); lift_ret_i++ {
      var empty_lift_ret C.uint32_t
      lift_ret_ptr := *(*C.uint32_t)(unsafe.Pointer(uintptr(unsafe.Pointer(ret.ptr)) +
      uintptr(lift_ret_i)*unsafe.Sizeof(empty_lift_ret)))
      var list_lift_ret uint32
      list_lift_ret = uint32(lift_ret_ptr)
      lift_ret[lift_ret_i] = list_lift_ret
    }
  }
  return lift_ret
}

func (self WasiNnTensorTensor) Ty() WasiNnTensorTensorType {
  var lower_self C.wasi_nn_tensor_borrow_tensor_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_nn_tensor_method_tensor_ty(lower_self )
  var lift_ret WasiNnTensorTensorType
  if ret == 0 {
    lift_ret = WasiNnTensorTensorTypeFp16()
  }
  if ret == 1 {
    lift_ret = WasiNnTensorTensorTypeFp32()
  }
  if ret == 2 {
    lift_ret = WasiNnTensorTensorTypeFp64()
  }
  if ret == 3 {
    lift_ret = WasiNnTensorTensorTypeBf16()
  }
  if ret == 4 {
    lift_ret = WasiNnTensorTensorTypeU8()
  }
  if ret == 5 {
    lift_ret = WasiNnTensorTensorTypeI32()
  }
  if ret == 6 {
    lift_ret = WasiNnTensorTensorTypeI64()
  }
  return lift_ret
}

func (self WasiNnTensorTensor) Data() []uint8 {
  var lower_self C.wasi_nn_tensor_borrow_tensor_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_nn_tensor_tensor_data_t
  C.wasi_nn_tensor_method_tensor_data(lower_self , &ret )
  var lift_ret []uint8
  lift_ret = make([]uint8, ret.len)
  if ret.len > 0 {
    for lift_ret_i := 0; lift_ret_i < int(ret.len); lift_ret_i++ {
      var empty_lift_ret C.uint8_t
      lift_ret_ptr := *(*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(ret.ptr)) +
      uintptr(lift_ret_i)*unsafe.Sizeof(empty_lift_ret)))
      var list_lift_ret uint8
      list_lift_ret = uint8(lift_ret_ptr)
      lift_ret[lift_ret_i] = list_lift_ret
    }
  }
  return lift_ret
}

// Import functions from wasi:nn/errors
type WasiNnErrorsErrorCodeKind int

const (
WasiNnErrorsErrorCodeKindInvalidArgument WasiNnErrorsErrorCodeKind = iota
WasiNnErrorsErrorCodeKindInvalidEncoding
WasiNnErrorsErrorCodeKindTimeout
WasiNnErrorsErrorCodeKindRuntimeError
WasiNnErrorsErrorCodeKindUnsupportedOperation
WasiNnErrorsErrorCodeKindTooLarge
WasiNnErrorsErrorCodeKindNotFound
WasiNnErrorsErrorCodeKindSecurity
WasiNnErrorsErrorCodeKindUnknown
)

type WasiNnErrorsErrorCode struct {
  kind WasiNnErrorsErrorCodeKind
}

func (n WasiNnErrorsErrorCode) Kind() WasiNnErrorsErrorCodeKind {
  return n.kind
}

func WasiNnErrorsErrorCodeInvalidArgument() WasiNnErrorsErrorCode{
  return WasiNnErrorsErrorCode{kind: WasiNnErrorsErrorCodeKindInvalidArgument}
}

func WasiNnErrorsErrorCodeInvalidEncoding() WasiNnErrorsErrorCode{
  return WasiNnErrorsErrorCode{kind: WasiNnErrorsErrorCodeKindInvalidEncoding}
}

func WasiNnErrorsErrorCodeTimeout() WasiNnErrorsErrorCode{
  return WasiNnErrorsErrorCode{kind: WasiNnErrorsErrorCodeKindTimeout}
}

func WasiNnErrorsErrorCodeRuntimeError() WasiNnErrorsErrorCode{
  return WasiNnErrorsErrorCode{kind: WasiNnErrorsErrorCodeKindRuntimeError}
}

func WasiNnErrorsErrorCodeUnsupportedOperation() WasiNnErrorsErrorCode{
  return WasiNnErrorsErrorCode{kind: WasiNnErrorsErrorCodeKindUnsupportedOperation}
}

func WasiNnErrorsErrorCodeTooLarge() WasiNnErrorsErrorCode{
  return WasiNnErrorsErrorCode{kind: WasiNnErrorsErrorCodeKindTooLarge}
}

func WasiNnErrorsErrorCodeNotFound() WasiNnErrorsErrorCode{
  return WasiNnErrorsErrorCode{kind: WasiNnErrorsErrorCodeKindNotFound}
}

func WasiNnErrorsErrorCodeSecurity() WasiNnErrorsErrorCode{
  return WasiNnErrorsErrorCode{kind: WasiNnErrorsErrorCodeKindSecurity}
}

func WasiNnErrorsErrorCodeUnknown() WasiNnErrorsErrorCode{
  return WasiNnErrorsErrorCode{kind: WasiNnErrorsErrorCodeKindUnknown}
}

// WasiNnErrorsError is a handle to imported resource error
type WasiNnErrorsError int32

//go:wasmimport wasi:nn/errors [resource-drop]error
func _WasiNnErrorsError_drop(self WasiNnErrorsError)

func (self WasiNnErrorsError) Drop() {
  _WasiNnErrorsError_drop(self)
}

func NewError(code WasiNnErrorsErrorCode, data string) WasiNnErrorsError {
  var lower_code C.wasi_nn_errors_error_code_t
  if code.Kind() == WasiNnErrorsErrorCodeKindInvalidArgument {
    lower_code = 0
  }
  if code.Kind() == WasiNnErrorsErrorCodeKindInvalidEncoding {
    lower_code = 1
  }
  if code.Kind() == WasiNnErrorsErrorCodeKindTimeout {
    lower_code = 2
  }
  if code.Kind() == WasiNnErrorsErrorCodeKindRuntimeError {
    lower_code = 3
  }
  if code.Kind() == WasiNnErrorsErrorCodeKindUnsupportedOperation {
    lower_code = 4
  }
  if code.Kind() == WasiNnErrorsErrorCodeKindTooLarge {
    lower_code = 5
  }
  if code.Kind() == WasiNnErrorsErrorCodeKindNotFound {
    lower_code = 6
  }
  if code.Kind() == WasiNnErrorsErrorCodeKindSecurity {
    lower_code = 7
  }
  if code.Kind() == WasiNnErrorsErrorCodeKindUnknown {
    lower_code = 8
  }
  var lower_data C.ml_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_data.ptr = (*uint8)(unsafe.Pointer(C.CString(data)))
  lower_data.len = C.size_t(len(data))
  ret := C.wasi_nn_errors_constructor_error(lower_code , &lower_data )
  var lift_ret WasiNnErrorsError
  lift_ret = WasiNnErrorsError(ret.__handle)
  
  return lift_ret
}

func (self WasiNnErrorsError) Code() WasiNnErrorsErrorCode {
  var lower_self C.wasi_nn_errors_borrow_error_t
  lower_self.__handle = C.int32_t(self)
  ret := C.wasi_nn_errors_method_error_code(lower_self )
  var lift_ret WasiNnErrorsErrorCode
  if ret == 0 {
    lift_ret = WasiNnErrorsErrorCodeInvalidArgument()
  }
  if ret == 1 {
    lift_ret = WasiNnErrorsErrorCodeInvalidEncoding()
  }
  if ret == 2 {
    lift_ret = WasiNnErrorsErrorCodeTimeout()
  }
  if ret == 3 {
    lift_ret = WasiNnErrorsErrorCodeRuntimeError()
  }
  if ret == 4 {
    lift_ret = WasiNnErrorsErrorCodeUnsupportedOperation()
  }
  if ret == 5 {
    lift_ret = WasiNnErrorsErrorCodeTooLarge()
  }
  if ret == 6 {
    lift_ret = WasiNnErrorsErrorCodeNotFound()
  }
  if ret == 7 {
    lift_ret = WasiNnErrorsErrorCodeSecurity()
  }
  if ret == 8 {
    lift_ret = WasiNnErrorsErrorCodeUnknown()
  }
  return lift_ret
}

func (self WasiNnErrorsError) Data() string {
  var lower_self C.wasi_nn_errors_borrow_error_t
  lower_self.__handle = C.int32_t(self)
  var ret C.ml_string_t
  C.wasi_nn_errors_method_error_data(lower_self , &ret )
  var lift_ret string
  lift_ret = C.GoStringN((*C.char)(unsafe.Pointer(ret.ptr)), C.int(ret.len))
  return lift_ret
}

// Import functions from wasi:nn/inference
type WasiNnInferenceError = WasiNnErrorsError
type WasiNnInferenceTensor = WasiNnTensorTensor
type WasiNnInferenceTensorData = []uint8
// WasiNnInferenceGraphExecutionContext is a handle to imported resource graph-execution-context
type WasiNnInferenceGraphExecutionContext int32

//go:wasmimport wasi:nn/inference [resource-drop]graph-execution-context
func _WasiNnInferenceGraphExecutionContext_drop(self WasiNnInferenceGraphExecutionContext)

func (self WasiNnInferenceGraphExecutionContext) Drop() {
  _WasiNnInferenceGraphExecutionContext_drop(self)
}

func (self WasiNnInferenceGraphExecutionContext) SetInput(name string, tensor WasiNnInferenceTensor) Result[struct{}, WasiNnInferenceError] {
  var lower_self C.wasi_nn_inference_borrow_graph_execution_context_t
  lower_self.__handle = C.int32_t(self)
  var lower_name C.ml_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_name.ptr = (*uint8)(unsafe.Pointer(C.CString(name)))
  lower_name.len = C.size_t(len(name))
  var lower_tensor C.wasi_nn_inference_own_tensor_t
  lower_tensor.__handle = C.int32_t(tensor)
  var ret C.wasi_nn_inference_result_void_own_error_t
  C.wasi_nn_inference_method_graph_execution_context_set_input(lower_self , &lower_name , lower_tensor , &ret )
  var lift_ret Result[struct{}, WasiNnInferenceError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_nn_inference_own_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiNnInferenceError
    lift_ret_val = WasiNnInferenceError(lift_ret_ptr.__handle)
    
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiNnInferenceGraphExecutionContext) Compute() Result[struct{}, WasiNnInferenceError] {
  var lower_self C.wasi_nn_inference_borrow_graph_execution_context_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_nn_inference_result_void_own_error_t
  C.wasi_nn_inference_method_graph_execution_context_compute(lower_self , &ret )
  var lift_ret Result[struct{}, WasiNnInferenceError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_nn_inference_own_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiNnInferenceError
    lift_ret_val = WasiNnInferenceError(lift_ret_ptr.__handle)
    
    lift_ret.SetErr(lift_ret_val)
  } else {
  }
  return lift_ret
}

func (self WasiNnInferenceGraphExecutionContext) GetOutput(name string) Result[WasiNnInferenceTensor, WasiNnInferenceError] {
  var lower_self C.wasi_nn_inference_borrow_graph_execution_context_t
  lower_self.__handle = C.int32_t(self)
  var lower_name C.ml_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_name.ptr = (*uint8)(unsafe.Pointer(C.CString(name)))
  lower_name.len = C.size_t(len(name))
  var ret C.wasi_nn_inference_result_own_tensor_own_error_t
  C.wasi_nn_inference_method_graph_execution_context_get_output(lower_self , &lower_name , &ret )
  var lift_ret Result[WasiNnInferenceTensor, WasiNnInferenceError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_nn_inference_own_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiNnInferenceError
    lift_ret_val = WasiNnInferenceError(lift_ret_ptr.__handle)
    
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_nn_inference_own_tensor_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiNnInferenceTensor
    lift_ret_val = WasiNnInferenceTensor(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

// Import functions from wasi:nn/graph
type WasiNnGraphError = WasiNnErrorsError
type WasiNnGraphTensor = WasiNnTensorTensor
type WasiNnGraphGraphExecutionContext = WasiNnInferenceGraphExecutionContext
// WasiNnGraphGraph is a handle to imported resource graph
type WasiNnGraphGraph int32

//go:wasmimport wasi:nn/graph [resource-drop]graph
func _WasiNnGraphGraph_drop(self WasiNnGraphGraph)

func (self WasiNnGraphGraph) Drop() {
  _WasiNnGraphGraph_drop(self)
}

type WasiNnGraphGraphEncodingKind int

const (
WasiNnGraphGraphEncodingKindOpenvino WasiNnGraphGraphEncodingKind = iota
WasiNnGraphGraphEncodingKindOnnx
WasiNnGraphGraphEncodingKindTensorflow
WasiNnGraphGraphEncodingKindPytorch
WasiNnGraphGraphEncodingKindTensorflowlite
WasiNnGraphGraphEncodingKindAutodetect
WasiNnGraphGraphEncodingKindGgml
)

type WasiNnGraphGraphEncoding struct {
  kind WasiNnGraphGraphEncodingKind
}

func (n WasiNnGraphGraphEncoding) Kind() WasiNnGraphGraphEncodingKind {
  return n.kind
}

func WasiNnGraphGraphEncodingOpenvino() WasiNnGraphGraphEncoding{
  return WasiNnGraphGraphEncoding{kind: WasiNnGraphGraphEncodingKindOpenvino}
}

func WasiNnGraphGraphEncodingOnnx() WasiNnGraphGraphEncoding{
  return WasiNnGraphGraphEncoding{kind: WasiNnGraphGraphEncodingKindOnnx}
}

func WasiNnGraphGraphEncodingTensorflow() WasiNnGraphGraphEncoding{
  return WasiNnGraphGraphEncoding{kind: WasiNnGraphGraphEncodingKindTensorflow}
}

func WasiNnGraphGraphEncodingPytorch() WasiNnGraphGraphEncoding{
  return WasiNnGraphGraphEncoding{kind: WasiNnGraphGraphEncodingKindPytorch}
}

func WasiNnGraphGraphEncodingTensorflowlite() WasiNnGraphGraphEncoding{
  return WasiNnGraphGraphEncoding{kind: WasiNnGraphGraphEncodingKindTensorflowlite}
}

func WasiNnGraphGraphEncodingAutodetect() WasiNnGraphGraphEncoding{
  return WasiNnGraphGraphEncoding{kind: WasiNnGraphGraphEncodingKindAutodetect}
}

func WasiNnGraphGraphEncodingGgml() WasiNnGraphGraphEncoding{
  return WasiNnGraphGraphEncoding{kind: WasiNnGraphGraphEncodingKindGgml}
}

type WasiNnGraphExecutionTargetKind int

const (
WasiNnGraphExecutionTargetKindCpu WasiNnGraphExecutionTargetKind = iota
WasiNnGraphExecutionTargetKindGpu
WasiNnGraphExecutionTargetKindTpu
)

type WasiNnGraphExecutionTarget struct {
  kind WasiNnGraphExecutionTargetKind
}

func (n WasiNnGraphExecutionTarget) Kind() WasiNnGraphExecutionTargetKind {
  return n.kind
}

func WasiNnGraphExecutionTargetCpu() WasiNnGraphExecutionTarget{
  return WasiNnGraphExecutionTarget{kind: WasiNnGraphExecutionTargetKindCpu}
}

func WasiNnGraphExecutionTargetGpu() WasiNnGraphExecutionTarget{
  return WasiNnGraphExecutionTarget{kind: WasiNnGraphExecutionTargetKindGpu}
}

func WasiNnGraphExecutionTargetTpu() WasiNnGraphExecutionTarget{
  return WasiNnGraphExecutionTarget{kind: WasiNnGraphExecutionTargetKindTpu}
}

type WasiNnGraphGraphBuilder = uint8
func (self WasiNnGraphGraph) InitExecutionContext() Result[WasiNnGraphGraphExecutionContext, WasiNnGraphError] {
  var lower_self C.wasi_nn_graph_borrow_graph_t
  lower_self.__handle = C.int32_t(self)
  var ret C.wasi_nn_graph_result_own_graph_execution_context_own_error_t
  C.wasi_nn_graph_method_graph_init_execution_context(lower_self , &ret )
  var lift_ret Result[WasiNnGraphGraphExecutionContext, WasiNnGraphError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_nn_graph_own_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiNnGraphError
    lift_ret_val = WasiNnGraphError(lift_ret_ptr.__handle)
    
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_nn_graph_own_graph_execution_context_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiNnGraphGraphExecutionContext
    lift_ret_val = WasiNnGraphGraphExecutionContext(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiNnGraphLoad(builder [][]uint8, encoding WasiNnGraphGraphEncoding, target WasiNnGraphExecutionTarget) Result[WasiNnGraphGraph, WasiNnGraphError] {
  var lower_builder C.ml_list_graph_builder_t
  if len(builder) == 0 {
    lower_builder.ptr = nil
    lower_builder.len = 0
  } else {
    var empty_lower_builder C.wasi_nn_graph_graph_builder_t
    lower_builder.ptr = (*C.wasi_nn_graph_graph_builder_t)(C.malloc(C.size_t(len(builder)) * C.size_t(unsafe.Sizeof(empty_lower_builder))))
    lower_builder.len = C.size_t(len(builder))
    for lower_builder_i := range builder {
      lower_builder_ptr := (*C.wasi_nn_graph_graph_builder_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_builder.ptr)) +
      uintptr(lower_builder_i)*unsafe.Sizeof(empty_lower_builder)))
      if len(builder[lower_builder_i]) == 0 {
        lower_builder_ptr.ptr = nil
        lower_builder_ptr.len = 0
      } else {
        var empty_lower_builder_ptr C.uint8_t
        lower_builder_ptr.ptr = (*C.uint8_t)(C.malloc(C.size_t(len(builder[lower_builder_i])) * C.size_t(unsafe.Sizeof(empty_lower_builder_ptr))))
        lower_builder_ptr.len = C.size_t(len(builder[lower_builder_i]))
        for lower_builder_ptr_i := range builder[lower_builder_i] {
          lower_builder_ptr_ptr := (*C.uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(lower_builder_ptr.ptr)) +
          uintptr(lower_builder_ptr_i)*unsafe.Sizeof(empty_lower_builder_ptr)))
          lower_builder_ptr_ptr_value := C.uint8_t(builder[lower_builder_i][lower_builder_ptr_i])
          *lower_builder_ptr_ptr = lower_builder_ptr_ptr_value
        }
      }
    }
  }
  var lower_encoding C.wasi_nn_graph_graph_encoding_t
  if encoding.Kind() == WasiNnGraphGraphEncodingKindOpenvino {
    lower_encoding = 0
  }
  if encoding.Kind() == WasiNnGraphGraphEncodingKindOnnx {
    lower_encoding = 1
  }
  if encoding.Kind() == WasiNnGraphGraphEncodingKindTensorflow {
    lower_encoding = 2
  }
  if encoding.Kind() == WasiNnGraphGraphEncodingKindPytorch {
    lower_encoding = 3
  }
  if encoding.Kind() == WasiNnGraphGraphEncodingKindTensorflowlite {
    lower_encoding = 4
  }
  if encoding.Kind() == WasiNnGraphGraphEncodingKindAutodetect {
    lower_encoding = 5
  }
  if encoding.Kind() == WasiNnGraphGraphEncodingKindGgml {
    lower_encoding = 6
  }
  var lower_target C.wasi_nn_graph_execution_target_t
  if target.Kind() == WasiNnGraphExecutionTargetKindCpu {
    lower_target = 0
  }
  if target.Kind() == WasiNnGraphExecutionTargetKindGpu {
    lower_target = 1
  }
  if target.Kind() == WasiNnGraphExecutionTargetKindTpu {
    lower_target = 2
  }
  var ret C.wasi_nn_graph_result_own_graph_own_error_t
  C.wasi_nn_graph_load(&lower_builder , lower_encoding , lower_target , &ret )
  var lift_ret Result[WasiNnGraphGraph, WasiNnGraphError]
  if ret.is_err {
    lift_ret_ptr := *(*C.wasi_nn_graph_own_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiNnGraphError
    lift_ret_val = WasiNnGraphError(lift_ret_ptr.__handle)
    
    lift_ret.SetErr(lift_ret_val)
  } else {
    lift_ret_ptr := *(*C.wasi_nn_graph_own_graph_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiNnGraphGraph
    lift_ret_val = WasiNnGraphGraph(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

func WasiNnGraphLoadByName(name string) Result[WasiNnGraphGraph, WasiNnGraphError] {
  var lower_name C.ml_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_name.ptr = (*uint8)(unsafe.Pointer(C.CString(name)))
  lower_name.len = C.size_t(len(name))
  var ret C.wasi_nn_graph_result_own_graph_own_error_t
  C.wasi_nn_graph_load_by_name(&lower_name , &ret )
  var lift_ret Result[WasiNnGraphGraph, WasiNnGraphError]
  if ret.is_err {
    fmt.Println("here error")

    lift_ret_ptr := *(*C.wasi_nn_graph_own_error_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiNnGraphError
    lift_ret_val = WasiNnGraphError(lift_ret_ptr.__handle)
    
    lift_ret.SetErr(lift_ret_val)
  } else {
    fmt.Println("here")
    lift_ret_ptr := *(*C.wasi_nn_graph_own_graph_t)(unsafe.Pointer(&ret.val))
    var lift_ret_val WasiNnGraphGraph
    lift_ret_val = WasiNnGraphGraph(lift_ret_ptr.__handle)
    
    lift_ret.Set(lift_ret_val)
  }
  return lift_ret
}

